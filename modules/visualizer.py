import streamlit as st
import pandas as pd
import plotly.express as px

def display_task_table(df: pd.DataFrame):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á tasks
    """
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sort)
    display_df = df[["Week", "Assign To", "Task Name", "Department", "Collab", "Due Date", "Completed?"]].copy()
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ st.dataframe ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ sort ‡πÑ‡∏î‡πâ
    st.dataframe(
        display_df,
        use_container_width=True,
        hide_index=True,
        column_config={
            "Week": st.column_config.TextColumn("‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", width="medium"),
            "Assign To": st.column_config.TextColumn("‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ", width="medium"),
            "Task Name": st.column_config.TextColumn("‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô", width="large"),
            "Department": st.column_config.TextColumn("‡πÅ‡∏ú‡∏ô‡∏Å", width="medium"),
            "Collab": st.column_config.TextColumn("‡∏ú‡∏π‡πâ‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô", width="medium"),
            "Due Date": st.column_config.TextColumn("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á", width="small"),
            "Completed?": st.column_config.TextColumn("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", width="small")
        }
    )

def display_task_stats(filtered_df: pd.DataFrame):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á tasks
    """
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìù Tasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(filtered_df))
    
    with col2:
        completed_count = len(filtered_df[filtered_df["Completed_Bool"] == True])
        st.metric("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", completed_count)
    
    with col3:
        pending_count = len(filtered_df[filtered_df["Completed_Bool"] == False])
        st.metric("‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à", pending_count)
    
    with col4:
        completion_rate = (completed_count / len(filtered_df) * 100) if len(filtered_df) > 0 else 0
        st.metric("üìà ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à", f"{completion_rate:.1f}%")

def display_person_summary(person_summary: pd.DataFrame):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
    """
    # Create a copy of the dataframe to avoid modifying the original
    styled_df = person_summary.copy()
    
    # Add a column for styling based on completion rate
    if "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (%)" in styled_df.columns:
        # Ensure the column is a numeric type
        styled_df["‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (%)"] = pd.to_numeric(styled_df["‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (%)"], errors='coerce')
        
        # Create a styled dataframe
        styled_df = styled_df.style.apply(lambda x: ['background-color: #FF0000' 
                                  if v < 0.3 else 'background-color: #FFA500' 
                                  if v < 0.7 else 'background-color: #0000FF' 
                                  for v in x], 
                                  subset=['‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (%)'])
    
    st.dataframe(
        styled_df if isinstance(styled_df, pd.DataFrame) else person_summary,
        use_container_width=True,
        column_config={
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": st.column_config.NumberColumn("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"),
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à": st.column_config.NumberColumn("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à"),
            "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (%)": st.column_config.ProgressColumn(
                "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (%)", 
                min_value=0, 
                max_value=1,
            )
        }
    )

def display_section_summary(section_summary: pd.DataFrame):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° Section
    """
    # Create a copy of the dataframe to avoid modifying the original
    styled_df = section_summary.copy()
    
    # Add a column for styling based on completion rate
    if "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (%)" in styled_df.columns:
        # Ensure the column is a numeric type
        styled_df["‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (%)"] = pd.to_numeric(styled_df["‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (%)"], errors='coerce')
        
        # Create a styled dataframe
        styled_df = styled_df.style.apply(lambda x: ['background-color: #FF0000' 
                                  if v < 0.3 else 'background-color: #FFA500' 
                                  if v < 0.7 else 'background-color: #0000FF' 
                                  for v in x], 
                                  subset=['‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (%)'])
    
    st.dataframe(
        styled_df if isinstance(styled_df, pd.DataFrame) else section_summary,
        use_container_width=True,
        column_config={
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": st.column_config.NumberColumn("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"),
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à": st.column_config.NumberColumn("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à"),
            "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (%)": st.column_config.ProgressColumn(
                "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à (%)", 
                min_value=0, 
                max_value=1
            )
        }
    )

def display_timeline_chart(timeline_summary: pd.DataFrame):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü timeline ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
    """
    # ‡πÅ‡∏õ‡∏•‡∏á Week_Start_Date ‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ (dd/mm/yyyy)
    timeline_summary['Display_Date'] = pd.to_datetime(timeline_summary['Week_Start_Date']).dt.strftime('%d/%m/%Y')
    
    fig = px.line(
        timeline_summary,
        x="Display_Date",  # ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏ó‡∏ô Week
        y="Task Name",
        color="Department",
        markers=True,
        title="Timeline: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    )
    fig.update_layout(xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô", legend_title="‡πÅ‡∏ú‡∏ô‡∏Å")
    st.plotly_chart(fig, use_container_width=True)

def display_main_task_stats(stats: dict):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á tasks ‡∏´‡∏•‡∏±‡∏Å
    """
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìã Tasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", stats["total_tasks"])
    
    with col2:
        st.metric("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", stats["completed_tasks"])
    
    with col3:
        st.metric("‚è≥ ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", stats["pending_tasks"])
    
    with col4:
        st.metric("üìù Subtasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", stats["total_subtasks"])
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    st.progress(stats["completion_rate"] / 100)
    st.write(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°: {stats['completion_rate']:.1f}%**")
