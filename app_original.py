import streamlit as st
from datetime import datetime
import pandas as pd

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
from modules.data_loader import load_tasks_data
from modules.task_processor import (
    process_subtasks, apply_filters, get_all_assignees,
    create_person_summary, create_section_summary,
    prepare_timeline_data, get_task_statistics
)
from modules.visualizer import (
    display_task_table, display_task_stats,
    display_person_summary, display_section_summary,
    display_timeline_chart, display_main_task_stats
)
from modules.utils import get_current_time

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="Asana Tasks Report",
    page_icon="üìã",
    layout="wide"
)

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
st.title("üìã Asana Tasks Report Dashboard")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tasks
tasks_file = "tasks.json"
tasks = load_tasks_data(tasks_file)

# ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• subtasks
if tasks:
    subtasks_df = process_subtasks(tasks)
    
    if not subtasks_df.empty:
        st.markdown("---")
        st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Tasks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á filter options
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Filter ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô (Assign To ‡πÅ‡∏•‡∏∞ Collab)
            all_assignees = get_all_assignees(subtasks_df)
            selected_assignees = st.multiselect(
                "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• (‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢/‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô):",
                options=["‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô"] + all_assignees,
                default=["‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô"]
            )
        
        with col2:
            # Filter ‡∏ï‡∏≤‡∏° completion status
            completion_filter = st.selectbox(
                "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:",
                options=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à"]
            )
        
        with col3:
            # Filter ‡∏ï‡∏≤‡∏° Week
            all_weeks = sorted(subtasks_df["Week"].unique())
            selected_weeks = st.multiselect(
                "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå:",
                options=["‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"] + list(all_weeks),
                default=["‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"]
            )
        
        # Apply filters
        filtered_df = apply_filters(
            subtasks_df,
            selected_assignees,
            completion_filter,
            selected_weeks
        )
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        st.markdown("### üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
        display_task_stats(filtered_df)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        st.markdown("### üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
        display_task_table(filtered_df)
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ô ‡πÅ‡∏•‡∏∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° Section
        st.markdown("---")
        col_person, col_section = st.columns(2)
        
        with col_person:
            st.markdown("### üë• ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
            person_summary = create_person_summary(filtered_df)
            display_person_summary(person_summary)
        
        with col_section:
            st.markdown("### üè¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° Section")
            section_summary, section_df = create_section_summary(filtered_df)
            
            if section_summary is not None:
                display_section_summary(section_summary)
                
                # ‡∏Å‡∏£‡∏≤‡∏ü Timeline
                timeline_summary = prepare_timeline_data(filtered_df)
                if timeline_summary is not None:
                    display_timeline_chart(timeline_summary)
            else:
                st.write("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Section")

else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• subtasks ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ Tasks ‡∏´‡∏•‡∏±‡∏Å
if tasks:
    st.markdown("---")
    st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Tasks")
    
    # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    stats = get_task_statistics(tasks)
    display_main_task_stats(stats)
    
    st.markdown("---")
else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tasks ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
current_time = get_current_time()
st.caption(f"‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_time}")
st.caption(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: {tasks_file}")
